openapi: 3.0.0
info:
  title: Badger API
  description: Documentation for the Badger REST API. More info at gobadger.me.
  version: 0.1

servers:
  - url: https://<event>.gobadger.me/api/v1

paths:
  /public/reset:
    post:
      summary: Request a password reset.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SelfServiceResetForm"
      responses:
        202:
          description: Password reset request received.
        400:
          description: Bad client form.
        500:
          description: Internal server error.
  /user/user:
    get:
      summary: Get your own user account details.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    post:
      summary: Create a user account to link your card to.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UserForm"
      responses:
        201:
          description: Account created.
        409:
          description: Account already exists.
        400:
          description: Bad client form.
        500:
          description: Internal server error.
    patch:
      summary: Update the information in a user account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserForm"
      responses:
        200:
          description: Account updated.
        400:
          description: Bad client form.
        500:
          description: Internal server error.
  /user/announcement:
    get:
      summary: Get all announcements.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Announcement"
        500:
          description: Internal server error.
  /user/code/{code}:
    post:
      summary: Redeem a code for points.
      responses:
        201:
          description: Code redemption successful.
        404:
          description: Code not found.
        500:
          description: Internal server error.
  /user/event:
    get:
      summary: Get all events.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
        500:
          description: Internal server error.
  /user/rsvp:
    get:
      summary: Get all your RSVPs.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                example: [10, 15, 17]
                description: Event IDs of all the events you've RSVP'ed to.
        500:
          description: Internal server error.
  /user/rsvp/{eventId}:
    post:
      summary: Submit an RSVP for an event.
      responses:
        201:
          description: RSVP successful.
        404:
          description: Event not found.
        500:
          description: Internal server error.
    delete:
      summary: Delete an RSVP for an event.
      responses:
        200:
          description: Deletion successful.
        404:
          description: Not found.
        500:
          description: Internal server error.
  /user/attendance:
    get:
      summary: Get all your attendances.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                example: [10, 15, 17]
                description: Event IDs of all the events you've attended. 
        500:
          description: Internal server error.
  /user/attendance/{code}:
    post:
      summary: Submit an attendance code.
      responses:
        201:
          description: Attendance code successfully submitted.
        404:
          description: Attendance code not found.
        500:
          description: Internal server error.
  /user/entitlement:
    get:
      summary: Get a list of all the entitlements available.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Entitlement"
        500:
          description: Internal server error.
  /user/redemption:
    get:
      summary: Get a list of all your entitlement redemptions.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RedemptionForm"
        500:
          description: Internal server error.
  /user/reward:
    get:
      summary: Get a list of all the rewards available.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Reward"
        500:
          description: Internal server error.
  /user/claim:
    get:
      summary: Get a list of all your reward claims.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ClaimForm"
        500:
          description: Internal server error.
  /user/claim/{rewardId}:
    post:
      summary: Claim a reward.
      responses:
        201:
          description: Reward claimed.
        400:
          description: Reward claim failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Insufficient points balance."
                    description: An explanation of why the request failed.
        500:
          description: Internal server error.
  /manage/code:
    get:
      summary: Get a list of all codes and their values.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Code"
        500:
          description: Internal server error.
    post:
      summary: Create a code.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeForm"
      responses:
        201:
          description: Code created.
        409:
          description: Code already exists.
        500:
          description: Internal server error.
  /manage/code/{codeId}:
    patch:
      summary: Update a code.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CodeForm"
      responses:
        200:
          description: Code updated.
        400:
          description: Bad client form.
        404:
          description: Code not found.
        500:
          description: Internal server error.
    delete:
      summary: Delete a code.
      responses:
        200:
          description: Deletion successful.
        404:
          description: Not found.
        500:
          description: Internal server error.
  /manage/announcement:
    post:
      summary: Create an announcement.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnnouncementForm"
  /manage/announcement/{announcementId}:
    patch:
      summary: Update an announcement.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnnouncementForm"
      responses:
        200:
          description: Announcement updated.
        400:
          description: Bad client form.
        500:
          description: Internal server error.
    delete:
      summary: Delete an announcement.
      responses:
        200:
          description: Deletion successful.
        404:
          description: Not found.
        500:
          description: Internal server error.
  /manage/event:
    post:
      summary: Create an event.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventForm"
  /manage/event/{eventId}:
    patch:
      summary: Update an event.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventForm"
      responses:
        200:
          description: Event updated.
        400:
          description: Bad client form.
        500:
          description: Internal server error.
    delete:
      summary: Delete an event.
      responses:
        200:
          description: Deletion successful.
        404:
          description: Not found.
        500:
          description: Internal server error.
  /manage/rsvp:
    get:
      summary: Get a list of all RSVPs.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Rsvp"
        500:
          description: Internal server error.
    post:
      summary: Create an RSVP on a user's behalf.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RsvpForm"
      responses:
        201:
          description: RSVP created.
        404:
          description: User or event not found.
        409:
          description: RSVP already exists.
        500:
          description: Internal server error.
  /manage/rsvp/{rsvpId}:
    patch:
      summary: Update an RSVP.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RsvpForm"
      responses:
        200:
          description: RSVP updated.
        400:
          description: Bad client form.
        500:
          description: Internal server error.
    delete:
      summary: Delete an RSVP.
      responses:
        200:
          description: Deletion successful.
        404:
          description: Not found.
        500:
          description: Internal server error.
  /manage/attendance:
    get:
      summary: Get a list of all attendances.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Attendance"
        500:
          description: Internal server error.
    post:
      summary: Create an attendance on a user's behalf.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttendanceForm"
      responses:
        201:
          description: Attendance created.
        404:
          description: User or event not found.
        409:
          description: Attendance already exists.
        500:
          description: Internal server error.
  /manage/attendance/{attendanceId}:
    patch:
      summary: Update an attendance.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttendanceForm"
      responses:
        200:
          description: Attendance updated.
        400:
          description: Bad client form.
        500:
          description: Internal server error.
    delete:
      summary: Delete an attendance.
      responses:
        200:
          description: Deletion successful.
        404:
          description: Not found.
        500:
          description: Internal server error.
  /manage/entitlement:
    post:
      summary: Create an entitlement.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntitlementForm"
      responses:
        201:
          description: Entitlement created.
        409:
          description: Entitlement already exists.
        500:
          description: Internal server error.
  /manage/entitlement/{entitlementId}:
    patch:
      summary: Update an entitlement.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntitlementForm"
      responses:
        200:
          description: Entitlement updated.
        400:
          description: Bad client form.
        500:
          description: Internal server error.
    delete:
      summary: Delete an entitlement.
      responses:
        200:
          description: Deletion successful.
        404:
          description: Not found.
        500:
          description: Internal server error.
  /manage/redemption:
    get:
      summary: Get a list of all redemptions.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Redemption"
        500:
          description: Internal server error.
    post:
      summary: Create a redemption on behalf of a user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RedemptionForm"
      responses:
        201:
          description: Redemption created.
        409:
          description: Maximum number of redemptions reached.
        500:
          description: Internal server error.
  /manage/redemption/{redemptionId}:
    patch:
      summary: Update a redemption.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RedemptionForm"
      responses:
        200:
          description: Redemption updated.
        400:
          description: Bad client form.
        500:
          description: Internal server error.
    delete:
      summary: Delete a redemption.
      responses:
        200:
          description: Deletion successful.
        404:
          description: Not found.
        500:
          description: Internal server error.
  /manage/reward:
    post:
      summary: Create a reward.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/schemas/RewardForm"
      responses:
        201:
          description: Reward created.
        500:
          description: Internal server error.
  /manage/reward/{rewardId}:
    patch:
      summary: Update a reward.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/schemas/RewardForm"
      responses:
        200:
          description: Reward updated.
        400:
          description: Bad client form.
        500:
          description: Internal server error.
    delete:
      summary: Delete a reward.
      responses:
        200:
          description: Deletion successful.
        404:
          description: Not found.
        500:
          description: Internal server error.
  /manage/claim:
    get:
      summary: Get a list of all reward claims.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Claim"
        500:
          description: Internal server error.
    post:
      summary: Create a reward claim on a user's behalf.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#components/schemas/ClaimForm"
      responses:
  /manage/claim/{claimId}:
    patch:
      summary: Update a reward claim.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ClaimForm"
      responses:
        200:
          description: Claim updated.
        400:
          description: Bad client form.
        500:
          description: Internal server error.
    delete:
      summary: Delete a reward claim.
      responses:
        200:
          description: Deletion successful.
        404:
          description: Not found.
        500:
          description: Internal server error.
  /admin/user:
    get:
      summary: Get all users and their account info.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserPrivilegedView"
        500:
          description: Internal server error.
    post:
      summary: Create a user account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPrivilegedForm"
      responses:
        201:
          description: Account created.
        409:
          description: Account already exists.
        400:
          description: Bad client form.
        500:
          description: Internal server error.
  /admin/user/{userId}:
    patch:
      summary: Update the information in a user account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPrivilegedForm"
      responses:
        200:
          description: Account updated.
        400:
          description: Bad client form.
        404:
          description: Account not found.
        500:
          description: Internal server error.
    delete:
      summary: Delete an account.
      responses:
        200:
          description: Deletion successful.
        404:
          description: Not found.
        500:
          description: Internal server error.
  /admin/policy:
    get:
      summary: Get the policy settings.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Policy"
        500:
          description: Internal server error.
    patch:
      summary: Change the policy settings.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Policy"
      responses:
        200:
          description: Policy updated.
        400:
          description: Bad client form.
        500:
          description: Internal server error.
  /admin/reset:
    get:
      summary: Get a list of all requested account resets.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Reset"
        500:
          description: Internal server error.
  /admin/reset/{resetId}:
    patch:
      summary: Update an account reset.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetForm"
      responses:
        200:
          description: Policy updated.
        400:
          description: Bad client form.
        500:
          description: Internal server error.
    delete:
      summary: Delete a reset request.
      responses:
        200:
          description: Deletion successful.
        404:
          description: Not found.
        500:
          description: Internal server error.
  /admin/configure:
    get:
      summary: Get the scanner configurations.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Configuration"
        500:
          description: Internal server error.
    post:
      summary: Create a scanner configuration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfigurationForm"
      responses:
        201:
          description: Configuration created.
        409:
          description: Configuration already exists.
        400:
          description: Bad client form.
        500:
          description: Internal server error.
  /admin/configure/{configurationId}:
    patch:
      summary: Update a configuration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfigurationForm"
      responses:
        200:
          description: Policy updated.
        400:
          description: Bad client form.
        500:
          description: Internal server error.
    delete:
      summary: Delete a configuration.
      responses:
        200:
          description: Deletion successful.
        404:
          description: Not found.
        500:
          description: Internal server error.
  /admin/scanner:
    get:
      summary: Get a list of scanner statuses.
      responses:
        200:
          description: OK.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Scanner"
        500:
          description: Internal server error.
  /scanner/scan:
    post:
      summary: Report a batch of scans.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Scan"
      responses:
        202:
          description: Update received.
        500:
          description: Internal server error.
  /scanner/ping:
    post:
      summary: Report that this scanner is still alive.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Ping"
      responses:
        202:
          description: Update received.
        500:
          description: Internal server error.

components:
  schemas:
    UserForm:
      type: object
      properties:
        uid:
          type: integer
          example: 3735928559
        email:
          type: string
          example: "jdoe@email.com"
        password:
          type: string
          example: "hunter2"
        custom:
          type: string
          example: "e2N1c3RvbUZpZWxkOjEwfQo="
          description: Custom fields as Base64-encoded JSON.
    User:
      type: object
      properties:
        id:
          type: integer
          example: 10
        uid:
          type: integer
          example: 3735928559
        email:
          type: string
          example: "jdoe@email.com"
        points:
          type: integer
          example: 300
        claimed:
          type: boolean
          example: true
        custom:
          type: string
          example: "e2N1c3RvbUZpZWxkOjEwfQo="
          description: Custom fields as Base64-encoded JSON.
    UserPrivilegedForm:
      type: object
      properties:
        uid:
          type: integer
          example: 3735928559
        email:
          type: string
          example: "jdoe@email.com"
        points:
          type: integer
          example: 300
        claimed:
          type: boolean
          example: true
        custom:
          type: string
          example: "e2N1c3RvbUZpZWxkOjEwfQo="
          description: Custom fields as Base64-encoded JSON.
        privilege:
          type: integer
          example: 0
          description: 0 if user, 1 if admin. Left as an integer to allow for more privilege levels to be defined.
    UserPrivilegedView:
      allOf:
        - $ref: "#/components/schemas/UserPrivilegedForm"
        - type: object
          properties:
            id:
              type: integer
              example: 10
    CodeForm:
      type: object
      properties:
        code:
          type: string
          example: "AAAA-BB-CCCC"
        points:
          type: integer
          example: 20
    Code:
      allOf:
        - $ref: "#/components/schemas/CodeForm"
        - type: object
          properties:
            id:
              type: integer
              example: 10
    AnnouncementForm:
      type: object
      properties:
        timestamp:
          type: integer
          example: 1708743600
          description: Announcement timestamp in epoch seconds.
        body:
          type: string
          example: "We have leftover pizza in Room B4 if anyone would like to grab some!"
        author:
          type: string
          example: "Jane Doe"
    Announcement:
      allOf:
        - $ref: "#/components/schemas/AnnouncementForm"
        - type: object
          properties:
            id:
              type: integer
              example: 10
    EventForm:
      type: object
      properties:
        title:
          type: string
          example: "Opening Ceremony"
        location:
          type: string
          example: "Room A1"
        map:
          type: blob
          example: "<binary blob>"
        startTime:
          type: integer
          example: 1708743600
          description: Start time in epoch seconds.
        duration:
          type: integer
          example: 3600
          description: Duration of the event in seconds.
        points:
          type: integer
          example: 50
          description: Points reward for attendance.
        host:
          type: string
          example: "Jane Doe"
        description:
          type: string
          example: "Lorem ipsum dolor sit amet."
    Event:
      allOf:
        - $ref: "#/components/schemas/EventForm"
        - type: object
          properties:
            id:
              type: integer
              example: 10
    RsvpForm:
      type: object
      properties:
        userId:
          type: integer
          example: 44
          description: The ID of the user for whom this RSVP is for.
        eventId:
          type: integer
          example: 3
          description: The ID of the event for which this RSVP is for.
    Rsvp:
      allOf:
        - $ref: "#/components/schemas/RsvpForm"
        - type: object
          properties:
            id:
              type: integer
              example: 10
    AttendanceForm:
      type: object
      properties:
        userId:
          type: integer
          example: 44
          description: The ID of the user for whom this attendance is for.
        eventId:
          type: integer
          example: 3
          description: The ID of the event for which this attendance is for.
    Attendance:
      allOf:
        - $ref: "#/components/schemas/AttendanceForm"
        - type: object
          properties:
            id:
              type: integer
              example: 10
    EntitlementForm:
      type: object
      properties:
        title:
          type: string
          example: "Lunch"
        quantity:
          type: integer
          example: 3
          description: How many redemptions you are entitled to.
    Entitlement:
      allOf:
        - $ref: "#/components/schemas/EntitlementForm"
        - type: object
          properties:
            id:
              type: integer
              example: 1
    RedemptionForm:
      type: object
      properties:
        entitlementId:
          type: integer
          example: 1
          description: The ID of an entitlement.
        userId:
          type: integer
          example: 44
          description: The ID of the user for whom this redemption is for.
    Redemption:
      allOf:
        - $ref: "#/components/schemas/RedemptionForm"
        - type: object
          properties:
            id:
              type: integer
              example: 1
    RewardForm:
      type: object
      properties:
        item:
          type: string
          example: "Sticker Pack"
        points:
          type: integer
          example: 30
          description: How many points it costs to claim this reward.
        stockTotal:
          type: integer
          example: 50
          description: How many of this item there are in total.
        stockRemaining:
          type: integer
          example: 29
          description: How many of this item there are left.
    Reward:
      allOf:
        - $ref: "#/components/schemas/RewardForm"
        - type: object
          properties:
            id:
              type: integer
              example: 3
    ClaimForm:
      type: object
      properties:
        rewardId:
          type: integer
          example: 3
          description: ID of a reward you have claimed.
        userId:
          type: integer
          example: 44
          description: The ID of the user for whom this redemption is for.
        retrieved:
          type: boolean
          example: false
          description: Status of whether or not you have physically retrieved your claimed reward yet.
    Claim:
      allOf:
        - $ref: "#/components/schemas/ClaimForm"
        - type: object
          properties:
            id:
              type: integer
              example: 3
    Policy:
      type: object
      properties:
        requireRegistration:
          type: boolean
          example: true
          description: Require users to fill out their name, email, and password.
        selfServiceAccountReset:
          type: boolean
          example: true
          description: Allow users to self-service reset their own accounts.
        selfServiceAccountResetExpiry:
          type: integer
          example: 3600
          description: How long a self-service reset token is valid for.
    SelfServiceResetForm:
      type: object
      properties:
        email:
          type: string
          example: "jdoe@email.com"
    ResetForm:
      allOf:
        - $ref: "#/components/schemas/SelfServiceResetForm"
        - type: object
          properties:
            timestamp:
              type: integer
              example: 1708743600
            token:
              type: string
              example: "8286d7b2-253a-447e-bcad-d17408a80d87"
              description: Secret token used for account resets.
            valid:
              type: boolean
              example: true
              description: The reset token is valid.
            fulfilled:
              type: boolean
              example: false
              description: The reset has been completed.
    Reset:
      allOf:
        - $ref: "#/components/schemas/ResetForm"
        - type: object
          properties:
            id:
              type: integer
              example: 3
    ConfigurationForm:
      type: object
      properties:
        scannerId:
          type: integer
          example: 8
          description: The scanner ID number, as with the scanner's DIP switches.
        schedule:
          type: array
          items:
            type: object
            properties:
              timestamp:
                type: integer
                example: 1704067200
                description: The time at which this configuration will take effect.
              display:
                type: string
                example: "Check-In Station"
                description: The text that will be shown on the scanner's display.
              mode:
                type: string
                example: "check-in"
                description: The mode that this scanner will be in at that time.
    Configuration:
      allOf:
        - $ref: "#/components/schemas/ConfigurationForm"
        - type: object
          properties:
            id:
              type: integer
              example: 3
    Scanner:
      type: object
      properties:
        scannerId:
          type: integer
          example: 8
          description: The scanner ID number, set with the scanner's DIP switches.
        lastAlive:
          type: integer
          example: 1704067200
          description: The time at which activity from the scanner was last detected.
        scans:
          type: array
          items:
            type: object
            properties:
              uid:
                type: integer
                example: 3735928559
                description: The UID that was scanned.
              timestamp: 
                type: integer
                example: 1704067200
                description: The time at which it was scanned.
    Scan:
      type: object
      properties:
        scannerId:
          type: integer
          example: 8
          description: The scanner ID number, set with the scanner's DIP switches.
        scans:
          type: array
          example: [3735928559, 3405691582]
          description: The UIDs of cards scanned in this batch.
    Ping:
      type: object
      properties:
        scannerId:
          type: integer
          example: 8
          description: The scanner ID number, set with the scanner's DIP switches.
